package net.orandja.ktm.adapters

import kotlin.reflect.KType
import kotlin.reflect.typeOf


/**
 * Construct a new set of adapter based on [base].
 *
 * Usage:
 * ```kotlin
 * @KtmContext
 * class foo(val foo: String)
 *
 * @KtmContext
 * enum class Status { LOADING, VISIBLE, HIDDEN }
 *
 * val adapters = Ktm.adapter.make {
 *    + FooKtmAdapter // Auto generated by KSP
 *    + StatusKtmAdapter // Auto generated by KSP
 * }
 *
 * val context = Foo("value").toMustacheContext(adapters)
 * val context = adapters.contextOf(Status.LOADING)
 * ```
 *
 * @param base The underlying [KtmAdapter.Provider] instance for unknown type queries.
 */
class KtmAdapterProviderBuilder(private val base: KtmAdapter.Provider?) : BaseKtmAdapterProvider() {
    val adapters = mutableMapOf<KType, KtmAdapter<*>>()

    /**
     * Add adapters with a '+' symbol `+ MyAdapter`. Type is deducted from [T]
     */
    inline operator fun <reified T> KtmAdapter<T>.unaryPlus() = add<T>(this)

    /**
     * Add an [adapter] for type [T]
     */
    inline fun <reified T> add(adapter: KtmAdapter<T>) {
        adapters[typeOf<T>()] = adapter
    }

    /**
     * associate [adapter] with given [type] without type checks.
     */
    inline fun associate(type: KType, adapter: KtmAdapter<*>) {
        adapters[type] = adapter
    }

    /**
     * Implementation of [KtmAdapter.Provider] to build custom adapters from current builder
     */
    override fun get(kType: KType): KtmAdapter<*>? {
        return adapters[kType] ?: base?.get(kType) ?: super.get(kType)
    }

    fun build(): BaseKtmAdapterProvider = make(base, adapters)
}